////buildscript {
////  repositories {
////    mavenCentral()
////    maven { url 'https://s01.oss.sonatype.org' }
////    gradlePluginPortal()
////    mavenLocal()
////    google()
////    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
////    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
////  }
////  dependencies {
////
////
////  }
////}
////
////allprojects {
////  apply plugin: 'eclipse'
////  apply plugin: 'idea'
////
////  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
////  idea {
////    module {
////      outputDir file('build/classes/java/main')
////      testOutputDir file('build/classes/java/test')
////    }
////  }
////}
////
////configure(subprojects) {
////  apply plugin: 'java-library'
////  sourceCompatibility = 11
////
////  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
////  // The article can be helpful when using assets.txt in your project.
////  tasks.register('generateAssetList') {
////    inputs.dir("${project.rootDir}/assets/")
////    // projectFolder/assets
////    File assetsFolder = new File("${project.rootDir}/assets/")
////    // projectFolder/assets/assets.txt
////    File assetsFile = new File(assetsFolder, "assets.txt")
////    // delete that file in case we've already created it
////    assetsFile.delete()
////
////    // iterate through all files inside that folder
////    // convert it to a relative path
////    // and append it to the file assets.txt
////    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.each {
////      assetsFile.append(it + "\n")
////    }
////  }
////  processResources.dependsOn 'generateAssetList'
////
////  compileJava {
////    options.incremental = true
////  }
////}
////
////subprojects {
////  version = '$projectVersion'
////  ext.appName = 'APProject'
////  repositories {
////    mavenCentral()
////    maven { url 'https://s01.oss.sonatype.org' }
////    // You may want to remove the following line if you have errors downloading dependencies.
////    mavenLocal()
////    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
////    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
////    maven { url 'https://jitpack.io' }
////  }
////}
////
////eclipse.project.name = 'APProject' + '-parent'
//buildscript {
//  repositories {
//    mavenCentral()
//    maven { url 'https://s01.oss.sonatype.org' }
//    gradlePluginPortal()
//    mavenLocal()
//    google()
//    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
//    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
//  }
//  dependencies {
//    // No changes needed here unless you want to use specific plugins
//  }
//}
//
//allprojects {
//  apply plugin: 'eclipse'
//  apply plugin: 'idea'
//
//  idea {
//    module {
//      outputDir file('build/classes/java/main')
//      testOutputDir file('build/classes/java/test')
//    }
//  }
//}
//
//configure(subprojects) {
//  apply plugin: 'java-library'
//  sourceCompatibility = 8
//
//  dependencies {
//    testImplementation 'junit:junit:4.13.2' // JUnit 4 latest stable version
//    testImplementation 'org.mockito:mockito-core:3.12.4'  // Added Mockito core
//    testImplementation 'org.mockito:mockito-inline:3.12.4'  // Added Mockito inline for final class mocking
//    // You might also need this for LibGDX headless testing
//    testImplementation "com.badlogicgames.gdx:gdx-backend-headless:1.11.0"
//    testImplementation "com.badlogicgames.gdx:gdx-platform:1.11.0:natives-desktop"
//  }
//
//  tasks.register('generateAssetList') {
//    inputs.dir("${project.rootDir}/assets/")
//    File assetsFolder = new File("${project.rootDir}/assets/")
//    File assetsFile = new File(assetsFolder, "assets.txt")
//    assetsFile.delete()
//
//    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
//      assetsFile.append(it + "\n")
//    }
//  }
//  processResources.dependsOn 'generateAssetList'
//
//  compileJava {
//    options.incremental = true
//  }
//
//  test {
//    // Add test configuration for headless testing
//    systemProperty 'java.awt.headless', 'true'
//    systemProperty 'testing.headless', 'true'
//  }
//}
//
//subprojects {
//  version = '$projectVersion'
//  ext.appName = 'APFinal'
//  repositories {
//    mavenCentral()
//    maven { url 'https://s01.oss.sonatype.org' }
//    mavenLocal()
//    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
//    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
//    maven { url 'https://jitpack.io' }
//  }
//}
//
//eclipse.project.name = 'APFinal' + '-parent'
buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {
    // No changes needed here unless you want to use specific plugins
  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  sourceCompatibility = 8

  dependencies {
    testImplementation 'junit:junit:4.13.2' // JUnit 4 latest stable version
    testImplementation 'org.mockito:mockito-core:3.12.4'  // Added Mockito core
    testImplementation 'org.mockito:mockito-inline:3.12.4'  // Added Mockito inline for final class mocking

    // You might also need this for LibGDX headless testing
    testImplementation "com.badlogicgames.gdx:gdx-backend-headless:1.11.0"
    testImplementation "com.badlogicgames.gdx:gdx-platform:1.11.0:natives-desktop"
  }

  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    File assetsFolder = new File("${project.rootDir}/assets/")
    File assetsFile = new File(assetsFolder, "assets.txt")
    assetsFile.delete()

    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }

  test {
    // Configure JVM arguments to suppress dynamic agent loading warning
    systemProperty 'java.awt.headless', 'true'
    systemProperty 'testing.headless', 'true'
    jvmArgs '-XX:+EnableDynamicAgentLoading'  // Allow dynamic agent loading
  }
}

subprojects {
  version = '$projectVersion'
  ext.appName = 'APFinal'
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'APFinal' + '-parent'
